# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"
  
  # name for `vagrant global-status`
  config.vm.define "test3" do |t|
  end
  # name for VirtualBox
  config.vm.provider "virtualbox" do |v|
    v.name = "test3"
  end
  
   config.vm.network :forwarded_port, guest: 80, host: 8000
  
  if Vagrant.has_plugin?("vagrant-timezone")
    config.timezone.value = "UTC"
  end
   
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

 # echo "WARNING!!! Need install vagrant plugin vagrant-vbguest for you OS!!!"
    config.vm.synced_folder ".", "/project" , type: "virtualbox"  

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  
  # We are going to give VM 1/4 system memory & access to all cpu cores on the  host
  host = RbConfig::CONFIG['host_os']
    if host =~ /darwin/
      cpus = `sysctl -n hw.ncpu`.to_i
      mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 4
    elsif host =~ /linux/
      cpus = `nproc`.to_i
      mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 4
    else
      cpus = 2
      mem = 2048
    end
    vb.customize ["modifyvm", :id, "--memory", mem]
    vb.customize ["modifyvm", :id, "--cpus", cpus]
    
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
 
      sudo yum  update
  #   apt-get install -y apache2
sudo yum install joe mc -y 
sudo yum install  -y http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/j/joe-3.7-11.el7.x86_64.rpm
   echo "ssh connection enable begin"
      yum install augeas -y 
      augtool --autosave 'set /files/etc/ssh/sshd_config/PasswordAuthentication yes'
      sudo service sshd restart
   echo "ssh connection enable end"
 
  echo "NTP setting begin"
	sudo yum install -y ntp
	sudo systemctl start ntpd
	sudo  systemctl enable ntpd
	sudo  systemctl status ntpd
	sudo rm -rf /etc/localtime
	sudo ln -s /usr/share/zoneinfo/Europe/Kiev /etc/localtimeS
  echo "NTP setting end"
			  
     # sudo yum install -y traceroute mc joe wget
sudo yum install ansible -y
echo "----------------------------------------------------------------------"
echo "ansible --version:"
ansible --version
echo "----------------------------------------------------------------------"

#   First things first, update the OS and reboot.
     sudo yum -y update

#    Install requisite base packages
      sudo yum -y install bzip2 device-mapper-persistent-data gcc gcc-c++ git gettext lvm2 yum-utils

#    Add the EPEL and Docker repositories
      sudo yum -y install epel-release
      sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
     sudo yum -y update

#    Install Ansible and pip.
      sudo yum -y install ansible python-pip

#    Set up Docker CE.
       sudo yum -y install docker-ce
       sudo systemctl enable docker
       sudo systemctl start docker

#    Install docker-py via pip.
      sudo pip install -U docker-py	
	SHELL
end
